/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "gamepad.h"


// Define S3E_EXT_SKIP_LOADER_CALL_LOCK on the user-side to skip LoaderCallStart/LoaderCallDone()-entry.
// e.g. in s3eNUI this is used for generic user-side IwUI-based implementation.
#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
#if defined I3D_ARCH_MIPS || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)) || defined I3D_ARCH_NACLX86_64
// For platforms missing stack-switching (MIPS, WP8, NaCl, etc.) make loader-entry via LoaderCallStart/LoaderCallDone() on the user-side.
#define LOADER_CALL_LOCK
#endif
#endif


#include "gamepad_interface.h"

static gamepadFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xe6a02e94, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: gamepad");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xe6a02e94, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool gamepadAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

uint32 gamepadGetNumDevices()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[0] func: gamepadGetNumDevices"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadGetNumDevices);
#endif

    uint32 ret = g_Ext.m_gamepadGetNumDevices();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadGetNumDevices);
#endif

    return ret;
}

uint32 gamepadGetDeviceId(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[1] func: gamepadGetDeviceId"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadGetDeviceId);
#endif

    uint32 ret = g_Ext.m_gamepadGetDeviceId(index);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadGetDeviceId);
#endif

    return ret;
}

uint32 gamepadGetNumAxes(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[2] func: gamepadGetNumAxes"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadGetNumAxes);
#endif

    uint32 ret = g_Ext.m_gamepadGetNumAxes(index);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadGetNumAxes);
#endif

    return ret;
}

uint32 gamepadGetNumButtons(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[3] func: gamepadGetNumButtons"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadGetNumButtons);
#endif

    uint32 ret = g_Ext.m_gamepadGetNumButtons(index);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadGetNumButtons);
#endif

    return ret;
}

uint32 gamepadGetButtons(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[4] func: gamepadGetButtons"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadGetButtons);
#endif

    uint32 ret = g_Ext.m_gamepadGetButtons(index);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadGetButtons);
#endif

    return ret;
}

int32 gamepadGetAxis(uint32 index, uint32 axisIndex)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[5] func: gamepadGetAxis"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadGetAxis);
#endif

    int32 ret = g_Ext.m_gamepadGetAxis(index, axisIndex);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadGetAxis);
#endif

    return ret;
}

uint32 gamepadIsPointOfViewAvailable(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[6] func: gamepadIsPointOfViewAvailable"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadIsPointOfViewAvailable);
#endif

    uint32 ret = g_Ext.m_gamepadIsPointOfViewAvailable(index);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadIsPointOfViewAvailable);
#endif

    return ret;
}

int32 gamepadGetPointOfViewAngle(uint32 index)
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[7] func: gamepadGetPointOfViewAngle"));

    if (!_extLoad())
        return 0;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadGetPointOfViewAngle);
#endif

    int32 ret = g_Ext.m_gamepadGetPointOfViewAngle(index);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadGetPointOfViewAngle);
#endif

    return ret;
}

void gamepadUpdate()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[8] func: gamepadUpdate"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadUpdate);
#endif

    g_Ext.m_gamepadUpdate();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadUpdate);
#endif

    return;
}

void gamepadReset()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[9] func: gamepadReset"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadReset);
#endif

    g_Ext.m_gamepadReset();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadReset);
#endif

    return;
}

void gamepadCalibrate()
{
    IwTrace(GAMEPAD_VERBOSE, ("calling gamepad[10] func: gamepadCalibrate"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_gamepadCalibrate);
#endif

    g_Ext.m_gamepadCalibrate();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_gamepadCalibrate);
#endif

    return;
}
